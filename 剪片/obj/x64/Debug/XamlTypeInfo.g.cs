//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace 剪片
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::剪片.剪片_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::剪片.剪片_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::剪片.剪片_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace 剪片.剪片_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::剪片.剪片_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::剪片.剪片_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::剪片.剪片_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::剪片.剪片_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::剪片.剪片_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[41];
            _typeNameTable[0] = "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Microsoft.Graphics.Canvas.CanvasDevice";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "Single";
            _typeNameTable[5] = "Boolean";
            _typeNameTable[6] = "Windows.UI.Color";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "Windows.Foundation.Size";
            _typeNameTable[9] = "剪片.Control.MainCanvasControl";
            _typeNameTable[10] = "Int32";
            _typeNameTable[11] = "剪片.Control.PlayControl";
            _typeNameTable[12] = "剪片.Control.ThemeButton";
            _typeNameTable[13] = "Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar";
            _typeNameTable[14] = "Windows.UI.Xaml.Controls.ProgressBar";
            _typeNameTable[15] = "Double";
            _typeNameTable[16] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[17] = "剪片.Control.TranscoderControl2";
            _typeNameTable[18] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[19] = "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter";
            _typeNameTable[20] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[21] = "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType";
            _typeNameTable[22] = "System.Enum";
            _typeNameTable[23] = "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection";
            _typeNameTable[24] = "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior";
            _typeNameTable[25] = "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.SplitterCursorBehavior";
            _typeNameTable[26] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[27] = "剪片.Picker.TipPicker";
            _typeNameTable[28] = "剪片.Picker.NumberPicker";
            _typeNameTable[29] = "String";
            _typeNameTable[30] = "剪片.DrawPage";
            _typeNameTable[31] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[32] = "剪片.MainPage";
            _typeNameTable[33] = "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel";
            _typeNameTable[34] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[35] = "Windows.UI.Composition.DropShadow";
            _typeNameTable[36] = "Windows.UI.Composition.CompositionShadow";
            _typeNameTable[37] = "Windows.UI.Composition.CompositionObject";
            _typeNameTable[38] = "Windows.UI.Composition.CompositionBrush";
            _typeNameTable[39] = "Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions";
            _typeNameTable[40] = "Windows.UI.Xaml.Controls.NavigationView";

            _typeTable = new global::System.Type[41];
            _typeTable[0] = typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::Microsoft.Graphics.Canvas.CanvasDevice);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::System.Single);
            _typeTable[5] = typeof(global::System.Boolean);
            _typeTable[6] = typeof(global::Windows.UI.Color);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::Windows.Foundation.Size);
            _typeTable[9] = typeof(global::剪片.Control.MainCanvasControl);
            _typeTable[10] = typeof(global::System.Int32);
            _typeTable[11] = typeof(global::剪片.Control.PlayControl);
            _typeTable[12] = typeof(global::剪片.Control.ThemeButton);
            _typeTable[13] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Controls.ProgressBar);
            _typeTable[15] = typeof(global::System.Double);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[17] = typeof(global::剪片.Control.TranscoderControl2);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[19] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[21] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType);
            _typeTable[22] = typeof(global::System.Enum);
            _typeTable[23] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection);
            _typeTable[24] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior);
            _typeTable[25] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.SplitterCursorBehavior);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[27] = typeof(global::剪片.Picker.TipPicker);
            _typeTable[28] = typeof(global::剪片.Picker.NumberPicker);
            _typeTable[29] = typeof(global::System.String);
            _typeTable[30] = typeof(global::剪片.DrawPage);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[32] = typeof(global::剪片.MainPage);
            _typeTable[33] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[35] = typeof(global::Windows.UI.Composition.DropShadow);
            _typeTable[36] = typeof(global::Windows.UI.Composition.CompositionShadow);
            _typeTable[37] = typeof(global::Windows.UI.Composition.CompositionObject);
            _typeTable[38] = typeof(global::Windows.UI.Composition.CompositionBrush);
            _typeTable[39] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions);
            _typeTable[40] = typeof(global::Windows.UI.Xaml.Controls.NavigationView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_CanvasControl() { return new global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl(); }
        private object Activate_2_CanvasDevice() { return new global::Microsoft.Graphics.Canvas.CanvasDevice(); }
        private object Activate_9_MainCanvasControl() { return new global::剪片.Control.MainCanvasControl(); }
        private object Activate_11_PlayControl() { return new global::剪片.Control.PlayControl(); }
        private object Activate_12_ThemeButton() { return new global::剪片.Control.ThemeButton(); }
        private object Activate_13_RadialProgressBar() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar(); }
        private object Activate_17_TranscoderControl2() { return new global::剪片.Control.TranscoderControl2(); }
        private object Activate_19_GridSplitter() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter(); }
        private object Activate_27_TipPicker() { return new global::剪片.Picker.TipPicker(); }
        private object Activate_28_NumberPicker() { return new global::剪片.Picker.NumberPicker(); }
        private object Activate_30_DrawPage() { return new global::剪片.DrawPage(); }
        private object Activate_32_MainPage() { return new global::剪片.MainPage(); }
        private object Activate_33_DropShadowPanel() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel(); }
        private object Activate_39_NavigationViewExtensions() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::剪片.剪片_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_CanvasControl;
                userType.AddMemberName("Device");
                userType.AddMemberName("Dpi");
                userType.AddMemberName("UseSharedDevice");
                userType.AddMemberName("ForceSoftwareRenderer");
                userType.AddMemberName("DpiScale");
                userType.AddMemberName("CustomDevice");
                userType.AddMemberName("ClearColor");
                userType.AddMemberName("ReadyToDraw");
                userType.AddMemberName("Size");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Microsoft.Graphics.Canvas.CanvasDevice
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Single
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Boolean
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.UI.Color
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  Windows.Foundation.Size
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  剪片.Control.MainCanvasControl
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_MainCanvasControl;
                userType.AddMemberName("Refresh");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Int32
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  剪片.Control.PlayControl
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_PlayControl;
                userType.AddMemberName("isPlay");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  剪片.Control.ThemeButton
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_12_ThemeButton;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ProgressBar"));
                userType.Activator = Activate_13_RadialProgressBar;
                userType.AddMemberName("Thickness");
                userType.AddMemberName("Outline");
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Xaml.Controls.ProgressBar
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Double
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  剪片.Control.TranscoderControl2
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_TranscoderControl2;
                userType.AddMemberName("DialogVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_19_GridSplitter;
                userType.AddMemberName("GripperCursor");
                userType.AddMemberName("GripperForeground");
                userType.AddMemberName("ResizeDirection");
                userType.AddMemberName("ResizeBehavior");
                userType.AddMemberName("CursorBehavior");
                userType.AddMemberName("Element");
                userType.AddMemberName("ParentLevel");
                userType.AddMemberName("GripperCustomCursorResource");
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.Default);
                userType.AddEnumValue("Arrow", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.Arrow);
                userType.AddEnumValue("Cross", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.Cross);
                userType.AddEnumValue("Custom", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.Custom);
                userType.AddEnumValue("Hand", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.Hand);
                userType.AddEnumValue("Help", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.Help);
                userType.AddEnumValue("IBeam", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.IBeam);
                userType.AddEnumValue("SizeAll", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.SizeAll);
                userType.AddEnumValue("SizeNortheastSouthwest", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.SizeNortheastSouthwest);
                userType.AddEnumValue("SizeNorthSouth", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.SizeNorthSouth);
                userType.AddEnumValue("SizeNorthwestSoutheast", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.SizeNorthwestSoutheast);
                userType.AddEnumValue("SizeWestEast", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.SizeWestEast);
                userType.AddEnumValue("UniversalNo", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.UniversalNo);
                userType.AddEnumValue("UpArrow", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.UpArrow);
                userType.AddEnumValue("Wait", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType.Wait);
                xamlType = userType;
                break;

            case 22:   //  System.Enum
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 23:   //  Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection.Auto);
                userType.AddEnumValue("Columns", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection.Columns);
                userType.AddEnumValue("Rows", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection.Rows);
                xamlType = userType;
                break;

            case 24:   //  Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BasedOnAlignment", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior.BasedOnAlignment);
                userType.AddEnumValue("CurrentAndNext", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior.CurrentAndNext);
                userType.AddEnumValue("PreviousAndCurrent", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior.PreviousAndCurrent);
                userType.AddEnumValue("PreviousAndNext", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior.PreviousAndNext);
                xamlType = userType;
                break;

            case 25:   //  Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.SplitterCursorBehavior
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("ChangeOnSplitterHover", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.SplitterCursorBehavior.ChangeOnSplitterHover);
                userType.AddEnumValue("ChangeOnGripperHover", global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.SplitterCursorBehavior.ChangeOnGripperHover);
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  剪片.Picker.TipPicker
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_27_TipPicker;
                userType.AddMemberName("TipVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  剪片.Picker.NumberPicker
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_28_NumberPicker;
                userType.AddMemberName("Max");
                userType.AddMemberName("Value");
                userType.AddMemberName("Min");
                userType.AddMemberName("Text");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  String
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  剪片.DrawPage
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_DrawPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  剪片.MainPage
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_33_DropShadowPanel;
                userType.AddMemberName("BlurRadius");
                userType.AddMemberName("ShadowOpacity");
                userType.AddMemberName("OffsetX");
                userType.AddMemberName("OffsetY");
                userType.AddMemberName("Color");
                userType.AddMemberName("DropShadow");
                userType.AddMemberName("Mask");
                userType.AddMemberName("OffsetZ");
                xamlType = userType;
                break;

            case 34:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Windows.UI.Composition.DropShadow
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionShadow"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Composition.CompositionShadow
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionObject"));
                xamlType = userType;
                break;

            case 37:   //  Windows.UI.Composition.CompositionObject
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 38:   //  Windows.UI.Composition.CompositionBrush
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Composition.CompositionObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions
                userType = new global::剪片.剪片_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_NavigationViewExtensions;
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("CollapseOnClick");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 40:   //  Windows.UI.Xaml.Controls.NavigationView
                xamlType = new global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Toolkit.Uwp.DeveloperTools.Microsoft_Toolkit_Uwp_DeveloperTools_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Microsoft_Toolkit_Uwp_UI_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_CanvasControl_Device(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.Device;
        }
        private object get_1_CanvasControl_Dpi(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.Dpi;
        }
        private object get_2_CanvasControl_UseSharedDevice(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.UseSharedDevice;
        }
        private void set_2_CanvasControl_UseSharedDevice(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.UseSharedDevice = (global::System.Boolean)Value;
        }
        private object get_3_CanvasControl_ForceSoftwareRenderer(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.ForceSoftwareRenderer;
        }
        private void set_3_CanvasControl_ForceSoftwareRenderer(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.ForceSoftwareRenderer = (global::System.Boolean)Value;
        }
        private object get_4_CanvasControl_DpiScale(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.DpiScale;
        }
        private void set_4_CanvasControl_DpiScale(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.DpiScale = (global::System.Single)Value;
        }
        private object get_5_CanvasControl_CustomDevice(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.CustomDevice;
        }
        private void set_5_CanvasControl_CustomDevice(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.CustomDevice = (global::Microsoft.Graphics.Canvas.CanvasDevice)Value;
        }
        private object get_6_CanvasControl_ClearColor(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.ClearColor;
        }
        private void set_6_CanvasControl_ClearColor(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.ClearColor = (global::Windows.UI.Color)Value;
        }
        private object get_7_CanvasControl_ReadyToDraw(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.ReadyToDraw;
        }
        private object get_8_CanvasControl_Size(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.Size;
        }
        private object get_9_MainCanvasControl_Refresh(object instance)
        {
            var that = (global::剪片.Control.MainCanvasControl)instance;
            return that.Refresh;
        }
        private void set_9_MainCanvasControl_Refresh(object instance, object Value)
        {
            var that = (global::剪片.Control.MainCanvasControl)instance;
            that.Refresh = (global::System.Int32)Value;
        }
        private object get_10_PlayControl_isPlay(object instance)
        {
            var that = (global::剪片.Control.PlayControl)instance;
            return that.isPlay;
        }
        private void set_10_PlayControl_isPlay(object instance, object Value)
        {
            var that = (global::剪片.Control.PlayControl)instance;
            that.isPlay = (global::System.Boolean)Value;
        }
        private object get_11_RadialProgressBar_Thickness(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            return that.Thickness;
        }
        private void set_11_RadialProgressBar_Thickness(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            that.Thickness = (global::System.Double)Value;
        }
        private object get_12_RadialProgressBar_Outline(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            return that.Outline;
        }
        private void set_12_RadialProgressBar_Outline(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            that.Outline = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private void set_13_TranscoderControl2_DialogVisibility(object instance, object Value)
        {
            var that = (global::剪片.Control.TranscoderControl2)instance;
            that.DialogVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_14_GridSplitter_GripperCursor(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.GripperCursor;
        }
        private void set_14_GridSplitter_GripperCursor(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.GripperCursor = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType)Value;
        }
        private object get_15_GridSplitter_GripperForeground(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.GripperForeground;
        }
        private void set_15_GridSplitter_GripperForeground(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.GripperForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_16_GridSplitter_ResizeDirection(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.ResizeDirection;
        }
        private void set_16_GridSplitter_ResizeDirection(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.ResizeDirection = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection)Value;
        }
        private object get_17_GridSplitter_ResizeBehavior(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.ResizeBehavior;
        }
        private void set_17_GridSplitter_ResizeBehavior(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.ResizeBehavior = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior)Value;
        }
        private object get_18_GridSplitter_CursorBehavior(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.CursorBehavior;
        }
        private void set_18_GridSplitter_CursorBehavior(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.CursorBehavior = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.SplitterCursorBehavior)Value;
        }
        private object get_19_GridSplitter_Element(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.Element;
        }
        private void set_19_GridSplitter_Element(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.Element = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_20_GridSplitter_ParentLevel(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.ParentLevel;
        }
        private void set_20_GridSplitter_ParentLevel(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.ParentLevel = (global::System.Int32)Value;
        }
        private object get_21_GridSplitter_GripperCustomCursorResource(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            return that.GripperCustomCursorResource;
        }
        private void set_21_GridSplitter_GripperCustomCursorResource(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)instance;
            that.GripperCustomCursorResource = (global::System.Int32)Value;
        }
        private void set_22_TipPicker_TipVisibility(object instance, object Value)
        {
            var that = (global::剪片.Picker.TipPicker)instance;
            that.TipVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_23_NumberPicker_Max(object instance)
        {
            var that = (global::剪片.Picker.NumberPicker)instance;
            return that.Max;
        }
        private void set_23_NumberPicker_Max(object instance, object Value)
        {
            var that = (global::剪片.Picker.NumberPicker)instance;
            that.Max = (global::System.Int32)Value;
        }
        private object get_24_NumberPicker_Value(object instance)
        {
            var that = (global::剪片.Picker.NumberPicker)instance;
            return that.Value;
        }
        private void set_24_NumberPicker_Value(object instance, object Value)
        {
            var that = (global::剪片.Picker.NumberPicker)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_25_NumberPicker_Min(object instance)
        {
            var that = (global::剪片.Picker.NumberPicker)instance;
            return that.Min;
        }
        private void set_25_NumberPicker_Min(object instance, object Value)
        {
            var that = (global::剪片.Picker.NumberPicker)instance;
            that.Min = (global::System.Int32)Value;
        }
        private void set_26_NumberPicker_Text(object instance, object Value)
        {
            var that = (global::剪片.Picker.NumberPicker)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_27_DropShadowPanel_BlurRadius(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.BlurRadius;
        }
        private void set_27_DropShadowPanel_BlurRadius(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.BlurRadius = (global::System.Double)Value;
        }
        private object get_28_DropShadowPanel_ShadowOpacity(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.ShadowOpacity;
        }
        private void set_28_DropShadowPanel_ShadowOpacity(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.ShadowOpacity = (global::System.Double)Value;
        }
        private object get_29_DropShadowPanel_OffsetX(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.OffsetX;
        }
        private void set_29_DropShadowPanel_OffsetX(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.OffsetX = (global::System.Double)Value;
        }
        private object get_30_DropShadowPanel_OffsetY(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.OffsetY;
        }
        private void set_30_DropShadowPanel_OffsetY(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.OffsetY = (global::System.Double)Value;
        }
        private object get_31_DropShadowPanel_Color(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.Color;
        }
        private void set_31_DropShadowPanel_Color(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_32_DropShadowPanel_DropShadow(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.DropShadow;
        }
        private object get_33_DropShadowPanel_Mask(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.Mask;
        }
        private void set_33_DropShadowPanel_Mask(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.Mask = (global::Windows.UI.Composition.CompositionBrush)Value;
        }
        private object get_34_DropShadowPanel_OffsetZ(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            return that.OffsetZ;
        }
        private void set_34_DropShadowPanel_OffsetZ(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)instance;
            that.OffsetZ = (global::System.Double)Value;
        }
        private object get_35_NavigationViewExtensions_SelectedIndex(object instance)
        {
            return global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.GetSelectedIndex((global::Windows.UI.Xaml.Controls.NavigationView)instance);
        }
        private void set_35_NavigationViewExtensions_SelectedIndex(object instance, object Value)
        {
            global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.SetSelectedIndex((global::Windows.UI.Xaml.Controls.NavigationView)instance, (global::System.Int32)Value);
        }
        private object get_36_NavigationViewExtensions_CollapseOnClick(object instance)
        {
            return global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.GetCollapseOnClick((global::Windows.UI.Xaml.Controls.NavigationView)instance);
        }
        private void set_36_NavigationViewExtensions_CollapseOnClick(object instance, object Value)
        {
            global::Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.SetCollapseOnClick((global::Windows.UI.Xaml.Controls.NavigationView)instance, (global::System.Boolean)Value);
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::剪片.剪片_XamlTypeInfo.XamlMember xamlMember = null;
            global::剪片.剪片_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Device":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Device", "Microsoft.Graphics.Canvas.CanvasDevice");
                xamlMember.Getter = get_0_CanvasControl_Device;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Dpi":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Dpi", "Single");
                xamlMember.Getter = get_1_CanvasControl_Dpi;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.UseSharedDevice":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "UseSharedDevice", "Boolean");
                xamlMember.Getter = get_2_CanvasControl_UseSharedDevice;
                xamlMember.Setter = set_2_CanvasControl_UseSharedDevice;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ForceSoftwareRenderer":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "ForceSoftwareRenderer", "Boolean");
                xamlMember.Getter = get_3_CanvasControl_ForceSoftwareRenderer;
                xamlMember.Setter = set_3_CanvasControl_ForceSoftwareRenderer;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.DpiScale":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "DpiScale", "Single");
                xamlMember.Getter = get_4_CanvasControl_DpiScale;
                xamlMember.Setter = set_4_CanvasControl_DpiScale;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.CustomDevice":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "CustomDevice", "Microsoft.Graphics.Canvas.CanvasDevice");
                xamlMember.Getter = get_5_CanvasControl_CustomDevice;
                xamlMember.Setter = set_5_CanvasControl_CustomDevice;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ClearColor":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "ClearColor", "Windows.UI.Color");
                xamlMember.Getter = get_6_CanvasControl_ClearColor;
                xamlMember.Setter = set_6_CanvasControl_ClearColor;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ReadyToDraw":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "ReadyToDraw", "Boolean");
                xamlMember.Getter = get_7_CanvasControl_ReadyToDraw;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Size":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Size", "Windows.Foundation.Size");
                xamlMember.Getter = get_8_CanvasControl_Size;
                xamlMember.SetIsReadOnly();
                break;
            case "剪片.Control.MainCanvasControl.Refresh":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Control.MainCanvasControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Refresh", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_MainCanvasControl_Refresh;
                xamlMember.Setter = set_9_MainCanvasControl_Refresh;
                break;
            case "剪片.Control.PlayControl.isPlay":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Control.PlayControl");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "isPlay", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_PlayControl_isPlay;
                xamlMember.Setter = set_10_PlayControl_isPlay;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar.Thickness":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Thickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_RadialProgressBar_Thickness;
                xamlMember.Setter = set_11_RadialProgressBar_Thickness;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar.Outline":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Outline", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_RadialProgressBar_Outline;
                xamlMember.Setter = set_12_RadialProgressBar_Outline;
                break;
            case "剪片.Control.TranscoderControl2.DialogVisibility":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Control.TranscoderControl2");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "DialogVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Setter = set_13_TranscoderControl2_DialogVisibility;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursor":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "GripperCursor", "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCursorType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_GridSplitter_GripperCursor;
                xamlMember.Setter = set_14_GridSplitter_GripperCursor;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperForeground":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "GripperForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_GridSplitter_GripperForeground;
                xamlMember.Setter = set_15_GridSplitter_GripperForeground;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.ResizeDirection":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "ResizeDirection", "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_GridSplitter_ResizeDirection;
                xamlMember.Setter = set_16_GridSplitter_ResizeDirection;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.ResizeBehavior":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "ResizeBehavior", "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GridResizeBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_GridSplitter_ResizeBehavior;
                xamlMember.Setter = set_17_GridSplitter_ResizeBehavior;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.CursorBehavior":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "CursorBehavior", "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.SplitterCursorBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_GridSplitter_CursorBehavior;
                xamlMember.Setter = set_18_GridSplitter_CursorBehavior;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.Element":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Element", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_GridSplitter_Element;
                xamlMember.Setter = set_19_GridSplitter_Element;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.ParentLevel":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "ParentLevel", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_GridSplitter_ParentLevel;
                xamlMember.Setter = set_20_GridSplitter_ParentLevel;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter.GripperCustomCursorResource":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "GripperCustomCursorResource", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_GridSplitter_GripperCustomCursorResource;
                xamlMember.Setter = set_21_GridSplitter_GripperCustomCursorResource;
                break;
            case "剪片.Picker.TipPicker.TipVisibility":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Picker.TipPicker");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "TipVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Setter = set_22_TipPicker_TipVisibility;
                break;
            case "剪片.Picker.NumberPicker.Max":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Picker.NumberPicker");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Max", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_NumberPicker_Max;
                xamlMember.Setter = set_23_NumberPicker_Max;
                break;
            case "剪片.Picker.NumberPicker.Value":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Picker.NumberPicker");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_NumberPicker_Value;
                xamlMember.Setter = set_24_NumberPicker_Value;
                break;
            case "剪片.Picker.NumberPicker.Min":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Picker.NumberPicker");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Min", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_NumberPicker_Min;
                xamlMember.Setter = set_25_NumberPicker_Min;
                break;
            case "剪片.Picker.NumberPicker.Text":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("剪片.Picker.NumberPicker");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Setter = set_26_NumberPicker_Text;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.BlurRadius":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "BlurRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_DropShadowPanel_BlurRadius;
                xamlMember.Setter = set_27_DropShadowPanel_BlurRadius;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.ShadowOpacity":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "ShadowOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_DropShadowPanel_ShadowOpacity;
                xamlMember.Setter = set_28_DropShadowPanel_ShadowOpacity;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.OffsetX":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "OffsetX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_DropShadowPanel_OffsetX;
                xamlMember.Setter = set_29_DropShadowPanel_OffsetX;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.OffsetY":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "OffsetY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_DropShadowPanel_OffsetY;
                xamlMember.Setter = set_30_DropShadowPanel_OffsetY;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.Color":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_DropShadowPanel_Color;
                xamlMember.Setter = set_31_DropShadowPanel_Color;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.DropShadow":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "DropShadow", "Windows.UI.Composition.DropShadow");
                xamlMember.Getter = get_32_DropShadowPanel_DropShadow;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.Mask":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "Mask", "Windows.UI.Composition.CompositionBrush");
                xamlMember.Getter = get_33_DropShadowPanel_Mask;
                xamlMember.Setter = set_33_DropShadowPanel_Mask;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel.OffsetZ":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "OffsetZ", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_DropShadowPanel_OffsetZ;
                xamlMember.Setter = set_34_DropShadowPanel_OffsetZ;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.SelectedIndex":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.Controls.NavigationView");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_35_NavigationViewExtensions_SelectedIndex;
                xamlMember.Setter = set_35_NavigationViewExtensions_SelectedIndex;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions.CollapseOnClick":
                userType = (global::剪片.剪片_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NavigationViewExtensions");
                xamlMember = new global::剪片.剪片_XamlTypeInfo.XamlMember(this, "CollapseOnClick", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.Controls.NavigationView");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_36_NavigationViewExtensions_CollapseOnClick;
                xamlMember.Setter = set_36_NavigationViewExtensions_CollapseOnClick;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::剪片.剪片_XamlTypeInfo.XamlSystemBaseType
    {
        global::剪片.剪片_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::剪片.剪片_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::剪片.剪片_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::剪片.剪片_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

